# Generated by Django 3.0.4 on 2021-03-18 11:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('instagram_id', models.CharField(help_text='인스타그램 아이디를 입력해주세요.', max_length=60, verbose_name='인스타그램 아이디')),
                ('instagram_pw', models.CharField(help_text='인스타그램 비밀번호를 입력해주세요.', max_length=60, verbose_name='인스타그램 비밀번호')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자',
                'db_table': 'users_tb',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BaseResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=0)),
                ('compare', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(verbose_name='생성일')),
            ],
        ),
        migrations.CreateModel(
            name='SearchTagList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '검색할 태그 목록',
                'verbose_name_plural': '검색할 태그 목록',
            },
        ),
        migrations.CreateModel(
            name='SearchAccountList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '검색할 계정 목록',
                'verbose_name_plural': '검색할 계정 목록',
            },
        ),
        migrations.CreateModel(
            name='CrawlingDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crawling_type', models.CharField(choices=[('tags', '태그'), ('accounts', '계정')], max_length=10, verbose_name='크롤링 유형')),
                ('created_at', models.DateTimeField(verbose_name='크롤링한 날짜')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '크롤링한 날짜',
                'verbose_name_plural': '크롤링한 날짜',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchTagResult',
            fields=[
                ('baseresult_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.BaseResult')),
                ('crawling_at', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.CrawlingDate')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.SearchTagList')),
            ],
            options={
                'verbose_name': '태그 검색 결과',
                'verbose_name_plural': '태그 검색 결과',
            },
            bases=('accounts.baseresult',),
        ),
        migrations.CreateModel(
            name='SearchAccountResult',
            fields=[
                ('baseresult_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='accounts.BaseResult')),
                ('crawling_at', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.CrawlingDate')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.SearchAccountList')),
            ],
            options={
                'verbose_name': '계정별 팔로워 검색 결과',
                'verbose_name_plural': '계정별 팔로워 검색 결과',
            },
            bases=('accounts.baseresult',),
        ),
    ]
